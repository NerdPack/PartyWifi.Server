// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PartyWifi.Server.Model;
using System;

namespace PartyWifi.Server.Migrations
{
    [DbContext(typeof(PartyWifiContext))]
    partial class PartyWifiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-preview2-25794");

            modelBuilder.Entity("PartyWifi.Server.Model.ImageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Identifier");

                    b.Property<int>("ImageState");

                    b.Property<long>("Size");

                    b.Property<DateTime>("UploadDate");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PartyWifi.Server.Model.ImageVersionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Hash");

                    b.Property<long?>("ImageEntityId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ImageEntityId");

                    b.ToTable("ImageVersionEntity");
                });

            modelBuilder.Entity("PartyWifi.Server.Model.ImageVersionEntity", b =>
                {
                    b.HasOne("PartyWifi.Server.Model.ImageEntity")
                        .WithMany("Versions")
                        .HasForeignKey("ImageEntityId");
                });
#pragma warning restore 612, 618
        }
    }
}
